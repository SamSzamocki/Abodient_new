================================================================================
MAIN AGENT EXECUTION TRACE - COMPLETE WORKFLOW ORCHESTRATION
================================================================================

EXECUTION METADATA
------------------
Workflow ID: QLo26z2Skc7ze3ga
Workflow Name: Main_agent  
Status: Active Workflow
Webhook ID: c79e88b8-63f7-4721-b655-8aafd4eb221d

NODE ARCHITECTURE (21 TOTAL NODES)
-----------------------------------
TRIGGER LAYER:
â”œâ”€ When chat message received (Chat Trigger) - Position: [-440,400]
â”œâ”€ When clicking "Execute Workflow" (Manual Trigger) - Position: [0,0]

AI AGENT LAYER:
â”œâ”€ AI Agent (toolsAgent) - Position: [-40,500]
â”œâ”€ OpenAI Chat Model5 (gpt-4o-mini) - Position: [-160,740]
â”œâ”€ Window Buffer Memory (5 conversation turns) - Position: [-160,1000]
â”‚  â””â”€ Session Key: 187a3d5d3eb44c06b2e3154710ca2ae7

TOOL LAYER (Connected as ai_tool to AI Agent):
â”œâ”€ Context_agent (Workflow Tool) - Position: [-20,880]
â”‚  â””â”€ Workflow ID: BAa1dwbqTsN59O4s
â”œâ”€ Contract_agent (Workflow Tool) - Position: [120,880]  
â”‚  â””â”€ Workflow ID: rg3M4eJbdkCAZPns
â”œâ”€ Classifier_agent (Workflow Tool) - Position: [280,880]
â”‚  â””â”€ Workflow ID: iXHMrTw7UTJxLFdn

OUTPUT PROCESSING LAYER:
â”œâ”€ Basic LLM Chain (Structured Parser) - Position: [360,500]
â”‚  â”œâ”€ OpenAI Chat Model2 (gpt-4o-mini) - Position: [400,700]
â”‚  â””â”€ Structured Output Parser1 - Position: [620,760]
â”‚      â””â”€ Schema: {chat_output, query_summary, actions}

CONDITIONAL PROCESSING:
â”œâ”€ If (Actions Not Empty Check) - Position: [720,420]
â”‚  â”œâ”€ TRUE Path: Actions â†’ HTTP Request
â”‚  â””â”€ FALSE Path: No Operation

ACTION EXECUTION LAYER:
â”œâ”€ Actions (Set Node) - Position: [1080,380]
â”œâ”€ HTTP Request (POST) - Position: [1400,340]
â”‚  â””â”€ URL: https://samirszamocki.app.n8n.cloud/webhook-test/159d84bd-45f5-43fb-9be9-9f8bc2ed6653
â”œâ”€ Pinned_Mock_action_data - Position: [1080,120]

RESPONSE LAYER:
â”œâ”€ Chat output (Set Node) - Position: [920,700]
â””â”€ Respond to Webhook - Position: [1160,700]

================================================================================
SYSTEM PROMPT STRUCTURE
================================================================================

ROLE DEFINITION:
"Expert property management agent acting on behalf of the landlord"

TOOL ORCHESTRATION RULES:
Step 1: ALWAYS call ContextAgent first (NEVER SKIP)
Step 2: Convert query to concise vector search query
Step 3: Send vector query to contractAgent  
Step 4: Send vector query to classifierAgent
Step 5: Use both responses to formulate final answer

RESPONSE EXAMPLES (4 built-in scenarios):
1. Mould Issue â†’ Urgent landlord responsibility 
2. Leaking Roof â†’ High urgency structural repair
3. No Heating/Hot Water â†’ Urgent habitability issue
4. Decorations â†’ Permission required, low risk

================================================================================
EXECUTION FLOW SEQUENCE
================================================================================

1. CHAT TRIGGER ACTIVATION
--------------------------
Input: User message received via hosted chat
Webhook Processing: c79e88b8-63f7-4721-b655-8aafd4eb221d
Initial Message: "Hi there! ðŸ˜‹\nMy name is Nathan. How can I assist you today?"

2. AI AGENT ORCHESTRATION
-------------------------
Agent Type: toolsAgent
Model: gpt-4o-mini via OpenAI Chat Model5
Memory: Window Buffer Memory (5 turns, session: 187a3d5d3eb44c06b2e3154710ca2ae7)

STEP 1: ContextAgent Tool Call
â”œâ”€ Purpose: Gather clarification/context
â”œâ”€ Input: User query summary
â”œâ”€ Expected Output: JSON with is_clear, requires_context, etc.
â””â”€ Next: Proceed only if no further clarification needed

STEP 2: Query Vectorization  
â”œâ”€ Convert user query to search keywords
â”œâ”€ Good: "pet policy rental agreement"
â””â”€ Bad: "What does my rental agreement say about pets?"

STEP 3: ContractAgent Tool Call
â”œâ”€ Purpose: Search contract for relevant clauses
â”œâ”€ Input: Vector search query
â””â”€ Output: Contractual position and responsibilities

STEP 4: ClassifierAgent Tool Call  
â”œâ”€ Purpose: Assess urgency and recommend actions
â”œâ”€ Input: Vector search query
â””â”€ Output: Urgency level and suggested next steps

STEP 5: Response Generation
â”œâ”€ Synthesize: Context + Contract + Classification
â”œâ”€ Format: Landlord voice, professional tone
â””â”€ Include: Specific actions if required

3. STRUCTURED OUTPUT PROCESSING
-------------------------------
AI Agent Raw Output â†’ Basic LLM Chain

PARSING PROMPT:
"Turn the input into a structured JSON output. 'chat_output' is the chat input you receive, 'Query_summary' summarises the input (string), 'actions' summarises the actions mentioned in the input. If there is no discernible action mentioned in the input, then leave 'actions' blank."

EXAMPLE TRANSFORMATION:
Input: "I will notify the landlord right away and arrange for a qualified plumber..."
Output: {
  "chat_output": "[Full response text]",
  "query_summary": "Hot water not working, high risk to tenant, landlords responsibility to fix", 
  "actions": ["Notify landlord that hot water is broken", "Arrange for plumber to fix"]
}

Structured Parser Schema:
{
  "chat_output": "<Input chat received>",
  "query_summary": "Hot water not working, high risk to tenant, landlords responsibility to fix",
  "actions": ["Notify landlord", "Arrange for plumber to fix"]
}

4. CONDITIONAL ACTION PROCESSING
--------------------------------
IF Node Evaluation: $json.output.actions (array not empty?)

TRUE PATH (Actions Exist):
â”œâ”€ Actions Set Node: Extract actions array
â”œâ”€ HTTP Request: POST to external webhook
â”‚  â”œâ”€ URL: https://samirszamocki.app.n8n.cloud/webhook-test/159d84bd-45f5-43fb-9be9-9f8bc2ed6653
â”‚  â”œâ”€ Body: {"Actions": [...]}
â”‚  â””â”€ Purpose: Trigger external action execution system
â””â”€ No Operation (completion)

FALSE PATH (No Actions):
â””â”€ No Operation (no external actions needed)

5. RESPONSE DELIVERY
--------------------
Chat Output Processing:
â”œâ”€ Extract: $json.output.chat_output
â”œâ”€ Set Node: Prepare response for webhook
â””â”€ Respond to Webhook: Send chat_output to user

================================================================================
MEMORY MANAGEMENT SYSTEM
================================================================================

Window Buffer Memory Configuration:
â”œâ”€ Context Window: 5 conversation turns
â”œâ”€ Session ID: 187a3d5d3eb44c06b2e3154710ca2ae7 (fixed session)
â”œâ”€ Memory Key: "chat_history"
â””â”€ Persistence: Maintains context across tool calls

Memory Integration Points:
1. AI Agent: Loads conversation history before processing
2. Tool Calls: Context passed to each sub-agent
3. Response Generation: Historical context influences responses
4. Memory Updates: New interactions automatically saved

================================================================================
TOOL WORKFLOW INTEGRATION
================================================================================

Context_agent Integration:
â”œâ”€ Workflow ID: BAa1dwbqTsN59O4s
â”œâ”€ Purpose: Ensure query completeness before proceeding
â”œâ”€ Input Schema: {query, chatInput}
â””â”€ Output: {is_clear, requires_context, query_summary, etc.}

Contract_agent Integration:
â”œâ”€ Workflow ID: rg3M4eJbdkCAZPns  
â”œâ”€ Purpose: Vector search through rental agreement
â”œâ”€ Input: Converted search query
â””â”€ Output: Relevant contract clauses and responsibilities

Classifier_agent Integration:
â”œâ”€ Workflow ID: iXHMrTw7UTJxLFdn
â”œâ”€ Purpose: Urgency assessment and action recommendations  
â”œâ”€ Input: Converted search query
â””â”€ Output: Risk level, urgency, suggested response approach

================================================================================
PINNED MOCK DATA (TESTING)
================================================================================

Mock Action Example:
{
  "output": {
    "actions": [
      "Notify landlord about the slippery tiles issue",
      "Recommend using non-slip mats as a temporary safety measure", 
      "Arrange for a maintenance inspection to address the slippery tiles"
    ]
  }
}

Purpose: Test action processing workflow without full agent execution

================================================================================
ORCHESTRATION INSIGHTS
================================================================================

1. SEQUENTIAL TOOL EXECUTION: Each tool call must complete before next step
2. MEMORY CONTINUITY: Session-based context maintained across all interactions  
3. STRUCTURED OUTPUT: Raw agent response always parsed into standardized format
4. CONDITIONAL ACTIONS: External action system only triggered when actions exist
5. DUAL OUTPUT PATHS: Chat response (immediate) + Actions (asynchronous processing)
6. ERROR HANDLING: Retry mechanisms built into LLM chains
7. WEBHOOK INTEGRATION: Both input (chat trigger) and output (action webhook) endpoints

================================================================================
CRITICAL EXECUTION DEPENDENCIES  
================================================================================

REQUIRED FOR SUCCESSFUL EXECUTION:
âœ“ OpenAI API credentials (ce4Dko4ewvOjQLgW)
âœ“ All 3 sub-agent workflows must be active and accessible
âœ“ External action webhook endpoint must be responsive
âœ“ Session memory persistence across tool calls
âœ“ Structured output parser JSON schema validation

FAILURE POINTS:
âœ— Sub-agent workflow unavailability
âœ— OpenAI API quota/rate limits  
âœ— Memory session conflicts
âœ— External webhook timeouts
âœ— JSON parsing failures in output structure